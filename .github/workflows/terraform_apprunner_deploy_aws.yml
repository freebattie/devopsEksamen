name: Apprunner AWS Terraform

on:
  push:
    branches:
      - '*'
      - '*/*'
      - '**'
env:
  IMAGE_CONTAINER: 244530008913.dkr.ecr.eu-west-1.amazonaws.com/student2012-private
jobs:
  create_s3_image_bucket:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      PORT: 8080
      BUCKET_NAME: kandidat-id-2012
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Check if Bucket Exists
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
        
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 244530008913.dkr.ecr.eu-west-1.amazonaws.com
          if aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
          echo "Bucket exists"
          echo "::set-output name=bucket_exists::true"
          else
          echo "Bucket does not exist"
          echo "::set-output name=bucket_exists::false"
          fi

      - name: Create S3 Bucket
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        if: steps.check-bucket.outputs.bucket_exists != 'true'
        run: |
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 244530008913.dkr.ecr.eu-west-1.amazonaws.com
          aws s3api create-bucket --bucket $BUCKET_NAME --region eu-west-1  
          aws s3api put-object --bucket $BUCKET_NAME --key camera/exit
          aws s3api put-object --bucket $BUCKET_NAME --key camera/entrance
          aws s3api put-object --bucket $BUCKET_NAME --key camera/private
          aws s3api put-object --bucket $BUCKET_NAME --key camera/employee

  copy_files_to_s3_bucket:
    runs-on: ubuntu-latest
    needs: create_s3_image_bucket
    steps:
      - name: Check if Bucket Exists
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          if aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
          echo "Bucket exists"
          echo "::set-output name=bucket_exists::true"
          else
          echo "Bucket does not exist"
          echo "::set-output name=bucket_exists::false"
          fi
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Check if S3 folder camera/pictures has images
        id: s3-check
        run: |
          object_count=$(aws s3 ls s3://$BUCKET_NAME/camera/pictures/ | wc -l)
          echo "::set-output name=object_count::$object_count"

      - name: Copy Images If Empty
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        if: ${{ steps.s3-check.outputs.object_count == '1' }}
        run: |
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 244530008913.dkr.ecr.eu-west-1.amazonaws.com
          aws s3 cp ./pictures s3://$BUCKET_NAME/camera/pictures --recursive
          aws s3 cp ./pictures/petter.jpg s3://$BUCKET_NAME/camera/employee/petter.jpg 
          aws s3 cp ./pictures/kari.jpg s3://$BUCKET_NAME/camera/pictures/kari.jpg 
          aws s3 cp ./pictures/stine.jpg s3://$BUCKET_NAME/camera/pictures/stine.jpg 
           

  build_docker_image:
    needs: copy_files_to_s3_bucket
    name: Push Docker image to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Build Docker Image
        run: |
          docker build . -t ppe2012  

      - name: Build and push Docker image
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        run: |
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 244530008913.dkr.ecr.eu-west-1.amazonaws.com
          rev=$(git rev-parse --short HEAD)
          docker tag ppe2012 ${{ env.IMAGE_CONTAINER }}:$rev
          docker tag ppe2012 ${{ env.IMAGE_CONTAINER }}:latest
          docker push ${{ env.IMAGE_CONTAINER }}:$rev
          docker push ${{ env.IMAGE_CONTAINER }}:latest

  terraform:
    name: "Terraform"
    needs: build_docker_image

    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-west-1
      PREFIX: Student-Nr-2012
      PORT: 8080
      EMAIL: ${{ secrets.EMAIL }}
      ALARM_LOGIN_THRESHOLD: 2
      METRIC_NAME: unauthorized_scan_attempts.count
      BUCKET_NAME: kandidat-id-2012

    #    TF_LOG: trace
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2


      - name: Terraform Init
        id: init
        working-directory: ./infra
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: ./infra
        run: terraform plan -var="email=$EMAIL"  -var="BUCKET_NAME=$BUCKET_NAME" -var="threshold=$ALARM_LOGIN_THRESHOLD" -var="metric_name=$METRIC_NAME"  -var="prefix=$PREFIX" -var="image=${{ env.IMAGE_CONTAINER }}:latest"  -var="port=$PORT" -no-color
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        working-directory: ./infra
        run: exit 1

      - name: Terraform Apply
        working-directory: ./infra

        run: terraform apply -var="email=$EMAIL" -var="BUCKET_NAME=$BUCKET_NAME" -var="threshold=$ALARM_LOGIN_THRESHOLD" -var="metric_name=$METRIC_NAME"  -var="prefix=$PREFIX" -var="image=${{ env.IMAGE_CONTAINER }}:latest"  -var="port=$PORT" -auto-approve

  

